<#@ template language="C#v3.5" hostspecific="True" debug="True" #>
<#@ output extension="txt" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ import namespace="Urasandesu.NAnonym" #>
<#@ import namespace="Urasandesu.NAnonym.Linq" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Urasandesu.NAnonym.dll" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="DecoratorGenerator.tt" #>
<#@ include file="DecoratorTemplate.tt" #>
<# 
/* 
 * File: Decorators.tt/Decorators.txt
 * 
 * Author: Akira Sugiura (urasandesu@gmail.com)
 * 
 * 
 * Copyright (c) 2010 Akira Sugiura
 *  
 *  This software is MIT License.
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
#>
<#
    var dg = new DecoratorGenerator();
    var dt = default(DecoratorTemplate);

    // IMethodBaseGeneratorDecorator
    dt = new DecoratorTemplate();
    dt.DecorationTypeQualifiedName = "Urasandesu.NAnonym.ILTools.IMethodBaseGenerator, Urasandesu.NAnonym, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null";
    dg.Templates.Add(dt.DecorationType.Name, dt);

    // IMethodBodyGeneratorDecorator
    dt = new DecoratorTemplate();
    dt.DecorationTypeQualifiedName = "Urasandesu.NAnonym.ILTools.IMethodBodyGenerator, Urasandesu.NAnonym, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null";
    dg.Templates.Add(dt.DecorationType.Name, dt);

    // IILOperatorDecorator
    dt = new DecoratorTemplate();
    dt.DecorationTypeQualifiedName = "Urasandesu.NAnonym.ILTools.IILOperator, Urasandesu.NAnonym, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null";
    dg.Templates.Add(dt.DecorationType.Name, dt);

    // ILocalGeneratorDecorator
    dt = new DecoratorTemplate();
    dt.DecorationTypeQualifiedName = "Urasandesu.NAnonym.ILTools.ILocalGenerator, Urasandesu.NAnonym, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null";
    dg.Templates.Add(dt.DecorationType.Name, dt);

    // ILabelGeneratorDecorator
    dt = new DecoratorTemplate();
    dt.DecorationTypeQualifiedName = "Urasandesu.NAnonym.ILTools.ILabelGenerator, Urasandesu.NAnonym, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null";
    dg.Templates.Add(dt.DecorationType.Name, dt);

	dg.Run();
#>
